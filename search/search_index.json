{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to xingong_pypack","text":"<p>Xingong's first python package using cookiecutter-pypackage</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://xingongli.github.io/xingong_pypack</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/xingongli/xingong_pypack/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>xingong_pypack could always use more documentation, whether as part of the official xingong_pypack docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/xingongli/xingong_pypack/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up xingong_pypack for local development.</p> <ol> <li> <p>Fork the xingong_pypack repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/xingong_pypack.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv xingong_pypack\n$ cd xingong_pypack/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 xingong_pypack tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/xingongli/xingong_pypack/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install xingong_pypack, run this command in your terminal:</p> <pre><code>pip install xingong_pypack\n</code></pre> <p>This is the preferred method to install xingong_pypack, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install xingong_pypack from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/xingongli/xingong_pypack\n</code></pre>"},{"location":"mapping/","title":"mapping module","text":"<p>The mapping module contains functions for generating flood inundation maps using tiled FDLPLN library.</p>"},{"location":"mapping/#xingong_pypack.mapping.hello_mapping","title":"<code>hello_mapping(name)</code>","text":"<p>Prints \"Hello, !\" to the console. <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name to say hello to.</p> required Source code in <code>xingong_pypack/mapping.py</code> <pre><code>def hello_mapping(name):\n    \"\"\"Prints \"Hello, &lt;name&gt;!\" to the console.\n\n    Args:\n        name (str): The name to say hello to.\n    \"\"\"\n    print(f\"Hello, {name}! Thanks for using the mapping module!\")\n</code></pre>"},{"location":"model/","title":"model module","text":"<p>The model module contains functions for generating segment-based library using the FLDPLN model's Python package.</p>"},{"location":"model/#xingong_pypack.model.hello_model","title":"<code>hello_model(name)</code>","text":"<p>Prints \"Hello, !\" to the console. <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name to say hello to.</p> required Source code in <code>xingong_pypack/model.py</code> <pre><code>def hello_model(name):\n    \"\"\"Prints \"Hello, &lt;name&gt;!\" to the console.\n\n    Args:\n        name (str): The name to say hello to.\n    \"\"\"\n    print(f\"Hello, {name}! Thanks for using the model module!\")\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use xingong_pypack in a project:</p> <pre><code>import xingong_pypack\n</code></pre>"},{"location":"xingong_pypack/","title":"xingong_pypack module","text":"<p>Main module.</p>"},{"location":"xingong_pypack/#xingong_pypack.xingong_pypack.hello","title":"<code>hello(name)</code>","text":"<p>Prints \"Hello, !\" to the console. <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name to say hello to.</p> required Source code in <code>xingong_pypack/xingong_pypack.py</code> <pre><code>def hello(name):\n    \"\"\"Prints \"Hello, &lt;name&gt;!\" to the console.\n\n    Args:\n        name (str): The name to say hello to.\n    \"\"\"\n    print(f\"Hello, {name}! Thanks for using xingong_pypack!\")\n</code></pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"}]}